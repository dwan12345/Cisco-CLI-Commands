/**
 * 
 */

var Antenna = function(obj) {

	this.Id = obj.atId;
	this.atId = obj.atId;
	this.apId = obj.apId;
	this.px = obj.px;
	this.py = obj.py;
	this.floorId = obj.floorId;
	this.atModel = obj.atModel;
	this.atName = obj.atName === undefined ? "" : obj.atName;
	this.angle = obj.angle === undefined ? 0 : obj.angle;// 弧度
	this.antennaType = obj.antennaType === undefined ? 0 : obj.antennaType;// 0全向，不能旋转

	this.radioList = [];
	if (obj.radioList !== undefined) {
		for (var j = 0; j < obj.radioList.length; j++) {
			var band = {};
			band.id = obj.radioList[j].id;
			band.atId = obj.radioList[j].atId;
			band.model = obj.radioList[j].model;
			band.modelId = obj.radioList[j].modelId;
			band.rf = obj.radioList[j].rf;
			band.deflection = obj.radioList[j].deflection;
			band.pattern = obj.radioList[j].pattern;
			band.bandName = obj.radioList[j].bandName;
			band.enable = obj.radioList[j].enable;
			band.pt = obj.radioList[j].pt;

			this.radioList.push(band);
		}
	}
	this.content = obj.content === undefined ? "" : obj.content;
	this.cost = obj.cost === undefined ? "" : obj.cost;

};

Antenna.prototype = {
	tooltip : function() {
		return this.atModel;
	},
	spx : function() {
		return this.px * this.options.canvasScale + this.options.translateOffX;
	},
	spy : function() {
		return this.py * this.options.canvasScale + this.options.translateOffY;
	},

	createPath : function(context, options) {
		this.options = options;

		var s = 5;
		context.beginPath();
		context.rect(this.spx() - SIDELENGTH_ANTENNA / 2 - s, this.spy()
				- SIDELENGTH_ANTENNA / 2 - s, SIDELENGTH_ANTENNA + s * 2,
				SIDELENGTH_ANTENNA + s * 2);
		context.closePath();

	},

	inRotatePath : function(context, mouseloc) {

		if (this.antennaType == 0)
			return false;

		context.beginPath();
		context.rect(this.spx() - 28, this.spy() - 6, 7, 12);
		context.closePath();
		if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

			context.canvas.style.cursor = CURSOR_ROTATE;
			return true;
		}
		context.beginPath();
		context.rect(this.spx() - 6, this.spy() - 29, 12, 7);
		context.closePath();
		if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

			context.canvas.style.cursor = CURSOR_ROTATE;
			return true;
		}
		context.beginPath();
		context.rect(this.spx() + 21, this.spy() - 6, 7, 12);
		context.closePath();
		if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

			context.canvas.style.cursor = CURSOR_ROTATE;
			return true;
		}
		context.beginPath();
		context.rect(this.spx() - 6, this.spy() + 22, 12, 7);
		context.closePath();
		if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

			context.canvas.style.cursor = CURSOR_ROTATE;
			return true;
		}
		return false;

	},

	stroke : function(context, options, sel) {
		this.options = options;
		context.save();

		context.font = "12px Arial";
		if (this.atId != "" && options.mouseoverId == this.atId) {
			context.font = "bold 12px Arial";
		}
		context.textAlign = "start";
		context.textBaseline = "middle";

		if (sel || options.mouseoverId == this.atId) {
			context.strokeStyle = COLOR_SEL;
			context.strokeStyle = "#2095f2";
			context.lineWidth = LINEWIDTH_SEL;
			this.createPath(context, options);
			context.stroke();
		}

		if (sel) {
			if (this.antennaType != 0) {
				context.drawImage(iconimages.apleft, this.spx() - 28, this
						.spy() - 6, 7, 12);
				context.drawImage(iconimages.aptop, this.spx() - 6,
						this.spy() - 29, 12, 7);
				context.drawImage(iconimages.apright, this.spx() + 21, this
						.spy() - 6, 7, 12);
				context.drawImage(iconimages.apbottom, this.spx() - 6, this
						.spy() + 22, 12, 7);
			}
			delbtn.style.left = this.spx() + SIDELENGTH_ANTENNA / 2 + 7 + "px";
			delbtn.style.top = this.spy() - SIDELENGTH_ANTENNA / 2 - 20 + "px";
			delbtn.style.display = "inline";

		}

		context.restore();
	},

	fill : function(context, options, parentAP) {
		this.options = options;
		if (parentAP != null) {
			parentAP.options = options;
			context.save();
			context.strokeStyle = AP_LINE_ANTENNA_COLOR;
			context.lineWidth = 2;
			drawDashedLine(this.spx(), this.spy(), parentAP.spx(), parentAP
					.spy(), context);

			if (options.currentBand == "24" && !parentAP.support24) {
				context.globalAlpha = 0.5;
			} else if (options.currentBand == "5" && !parentAP.support5) {
				context.globalAlpha = 0.5;
			}

		}
		if (this.antennaType == 0) {
			context.drawImage(iconimages.omniatImage, parseInt(this.spx()
					- SIDELENGTH_ANTENNA / 2), parseInt(this.spy()
					- SIDELENGTH_ANTENNA / 2));
		} else {
			if (this.angle == 0) {
				context.drawImage(iconimages.atImage, parseInt(this.spx()
						- SIDELENGTH_ANTENNA / 2), parseInt(this.spy()
						- SIDELENGTH_ANTENNA / 2));
				/*
				 * context.fillText(this.atModel, this.spx() + 5, this.spy() +
				 * this.ph + 10);
				 */
			} else {

				context.translate(this.spx(), this.spy());
				context.rotate(this.angle);
				context.drawImage(iconimages.atImage, -SIDELENGTH_ANTENNA / 2,
						-SIDELENGTH_ANTENNA / 2);
				/*
				 * context.fillText(this.atModel, -this.pw / 2 + 5, -this.ph / 2 +
				 * this.ph + 10);
				 */
			}
		}
		context.restore();
	}

};