/**
 * 
 */
var imageData = {};
var current = {};
var showTitle = {
	environment : "Environment Setting",
	apLocation : "AP Location",
	apList : "AP List",
	signalCoverage : "Signal Coverage",
	wdsMode : "WDS Mode",
	meshMode: "Mesh Mode",
	outdoor: "AP List"
};
var conIndex = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
		'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' ];
var show = {
	environment : function(floorId) {
		$("#environment p").html(imageData[floorId].sum);
		$("#environment img").attr("src", imageData[floorId].environment);
	},
	apLocation : function(floorId) {
		$("#apLocation p").html("Number of AP : " + imageData[floorId].apCount);
		$("#apLocation img").attr("src", imageData[floorId].apLocation);
	},
	apList : function(floorId) {
		$("#apList p").html("Number of AP : " + imageData[floorId].apCount);
		$("#apBody").html(imageData[floorId].apList);
	},
	signalCoverage : function(floorId) {
		$("#coverage_24 img").attr("src", imageData[floorId].coverage24);
		$("#coverage_5 img").attr("src", imageData[floorId].coverage5);
		$("#coverage_6 img").attr("src", imageData[floorId].coverage6);
	},
	wdsMode : function(floorId) {
		$("#wds_24 img").attr("src", imageData[floorId].wdsMode24);
		$("#wds_5 img").attr("src", imageData[floorId].wdsMode5);
	},
	meshMode: function (floorId) {
        var meshHtml24 = "";
        var meshHtml5="";
        var meshHtml='';
        for (var i = 0; i < imageData[floorId].meshGroups.length; i++) {
            var mesh = imageData[floorId].meshGroups[i];
            meshHtml += "<div id='mesh_" + imageData[floorId].meshGroups[i].meshId + "'><p>" + imageData[floorId].meshGroups[i].meshSSID+"-"+imageData[floorId].meshGroups[i].bandName + "GHz</p><img></div>";
            
            if(mesh.bandName=='2.4'){
                meshHtml24 += "<div id='mesh_" + imageData[floorId].meshGroups[i].meshId + "'><p>" + imageData[floorId].meshGroups[i].meshSSID+"-"+imageData[floorId].meshGroups[i].bandName + "GHz</p><img></div>";
                
            }else{
            	meshHtml5 += "<div id='mesh_" + imageData[floorId].meshGroups[i].meshId + "'><p>" + imageData[floorId].meshGroups[i].meshSSID+"-"+imageData[floorId].meshGroups[i].bandName + "GHz</p><img></div>";                
            }
         }
        $("#meshMode").html(meshHtml);
        if (imageData[floorId].meshMode) {
            for (var i = 0; i < imageData[floorId].meshMode.length; i++) {
                var mesh = imageData[floorId].meshMode[i];
                $("#mesh_" + mesh.meshId + " img").attr("src", imageData[floorId].meshMode[i].path)
            }
        }
    },
    outdoor: function (floorId) {
        $("#outdoor p").html("Number of AP : " + imageData[floorId].apCount);
        $("#outdoor_apBody").html(imageData[floorId].apList);
        $("#outdoor img").attr("src", imageData[floorId].outdoor);
    }
};
function saveReportImage(floorId, flag, callback) {
	if (flag == "apList") {
		callback();
	} else {
		var param = {
			imgData : imageData[floorId][flag],
			floorId : floorId,
			flag : flag
		};
		doActionParam(loader.Request.SaveReportImage, param, function(data) {
			callback();
		});
	}

}

function getReportAPTable(floor, tag, callback) {
	if (!imageData[floor.floorId])
		imageData[floor.floorId] = {};
	var aplist = floor.apList;
	var html = "";
	var apcount = 0;
	if (aplist) {
		apcount = aplist.length;
		for (var i = 0; i < apcount; i++) {
			html += getReportApHtml(i, tag, aplist[i]);
		}
	}
	imageData[floor.floorId].apList = html;
	imageData[floor.floorId].apCount = apcount;
	if (callback) {
		callback();
	}
}
var tableheight = 0;
function getPDFReportAPTable(floor, tag, callback) {
	$("#testtable1").show();
	var tar;
	var header = "<h3 class='p12 ml10'>c.	AP List</h3>";
	header += createTableheader();
	$("#" + floor.floorId + "_apList").html(header);
	var aplist = floor.apList;
	var html = "";
	var count = 0;
	var apcount = 0;
	if (aplist) {
		apcount = aplist.length;
		for (var i = 0; i < apcount; i++) {
			html += getReportApHtml(i, tag, aplist[i]);
			$("#testtable1 tbody").html(html);
			tableheight = $("#testtable1").height();

			if (tableheight > 1050 && i < apcount - 1 && count == 0) {
				$("#" + floor.floorId + "_apList .apBody").html(html);
				html = "";
				tar = $("#" + floor.floorId + "_apList");
				count += 1;
				var apdiv = "<div class='page' id='" + floor.floorId + count
						+ "_apList'>";
				apdiv += createTableheader();
				apdiv += "</div>";
				tar.after(apdiv);
			}
			// 除了第一页的表格高度
			if (tableheight > 1120 && i < apcount - 1 && count > 0) {
				$("#" + floor.floorId + count + "_apList .apBody").html(html);
				html = "";
				tar = $("#" + floor.floorId + count + "_apList");
				count += 1;
				var apdiv = "<div class='page' id='" + floor.floorId + count
						+ "_apList'>";
				apdiv += createTableheader();
				apdiv += "</div>";
				tar.after(apdiv);
			}
		}
	}
	html += "<tr ><td colspan='9' '><p>Total APs: " + apcount
			+ "</p></td></tr>";
	if (count == 0) {

		$("#" + floor.floorId + "_apList .apBody").html(html);
	} else {
		$("#" + floor.floorId + count + "_apList .apBody").html(html);
	}
	$("#testtable1").hide();
}

function getReportApHtml(index, tag, ap) {
	var html = "";
	var bandcount = ap.bandList.length;
	var ff = "";

	if (bandcount == 1 || (bandcount == 2 && !global.support.band5In)) {
		if (tag) {
			ff += "<td >" + index + "</td>";
		}
		ff += "<td style='padding-left:20px;'>" + ap.apName + "</td>";
		ff += "<td >" + ap.apModel + "</td>";

	} else if (bandcount === 2) {
		if (tag) {
			ff += `<td rowspan='${2}'>` + index + "</td>";
		}
		ff += `<td  rowspan='${2}' style='padding-left:20px;'>` + ap.apName
				+ "</td>";
		ff += `<td rowspan='${2}' >` + ap.apModel + "</td>";
	}
	else if (bandcount === 3) {
		const accessBandCnt = (global.support.band5In && global.support.band6In) ? 3 : (global.support.band5In || global.support.band6In) ? 2 : 1;
		if (tag) {
			ff += `<td rowspan='${accessBandCnt}'>` + index + "</td>";
		}

		ff += `<td  rowspan='${accessBandCnt}' style='padding-left:20px;'>` + ap.apName
				+ "</td>";
		ff += `<td rowspan='${accessBandCnt}' >` + ap.apModel + "</td>";
	}
	for (var m = 0; m < bandcount; m++) {

		if (!global.support.band5In) {
			if (ap.bandList[m].bandName == "5.0") {
				continue;
			}
		}

		if (!global.support.band6In) {
			if (ap.bandList[m].bandName == "6.0") {
				continue;
			}
		}

		if (bandcount == 1) {
			html += "<tr class='normalRow'>";
		} else if (bandcount == 2) {
			if (global.support.band5In) {
				if (m == 1) {
					html += "<tr class='normalRow' style='height:30px;border-top:none;'>";
				} else {
					html += "<tr class='normalRow' style='height:30px;'>";
				}
			} else {
				html += "<tr class='normalRow'>";
			}

		}
		else if (bandcount == 3) {
			if ((global.support.band5In && ap.apType == 0) || (global.support.band5Out && ap.apType == 1) ||
					(global.support.band6In && ap.apType == 0) || (global.support.band6Out && ap.apType == 1)) {
				if (m == 0) {
					html += "<tr class='normalRow' style='height:30px'>";
				}
				else {
					html += "<tr class='normalRow' style='height:30px;border-top:none;'>";
				}
			}
		}

		if (m == 0) {
			html += ff;
		}
		if (ap.bandList[m].enable == 0) {
			html += "<td >" + ap.bandList[m].bandName + "GHz On</td>";
			html += "<td >" + ap.bandList[m].apMode + "</td>";
			html += "<td>" + ap.bandList[m].channel + "</td>";
			html += "<td >" + ap.bandList[m].channelSize + " MHz</td>";
			html += "<td >" + ap.bandList[m].pt + " dBm</td>";

			if (bandcount == 1) {
				html += "<td>" + ap.apLocation + "</td>";
			} else if (bandcount == 2) {
				if (global.support.band5In) {
					if (m == 0) {
						html += "<td rowspan='2' >" + ap.apLocation + "</td>";
					}
				} else {
					html += "<td >" + ap.apLocation + "</td>";
				}
			}
			else if (bandcount == 3) {
				if (global.support.band6In) {
					if (m == 0) {
						html += "<td rowspan='3' >" + ap.apLocation + "</td>";
					}
				} else {
					html += "<td >" + ap.apLocation + "</td>";
				}
			}
		} else {
			html += "<td >" + ap.bandList[m].bandName + "GHz Off</td>";
			html += "<td style='opacity:0.5;' >" + ap.bandList[m].apMode
					+ "</td>";
			if (ap.bandList[m].bandName == "2.4") {
				html += "<td style='opacity:0.5;'>" + ap.bandList[m].channel
						+ "</td>";
			} else {
				html += "<td style='opacity:0.5;' >" + ap.bandList[m].channel
						+ "</td>";
			}
			html += "<td style='opacity:0.5;' >" + ap.bandList[m].channelSize
					+ " MHz</td>";
			html += "<td style='opacity:0.5;' >" + ap.bandList[m].pt
					+ " dBm</td>";
			if (bandcount == 1) {
				html += "<td >" + ap.apLocation + "</td>";
			} else if (bandcount == 2) {
				if (global.support.band5In) {
					if (m == 0) {
						html += "<td rowspan='2'>" + ap.apLocation + "</td>";
					}
				} else {
					html += "<td >" + ap.apLocation + "</td>";
				}
			}
			else if (bandcount == 3) {
				if (global.support.band6In) {
					if (m == 0) {
						html += "<td rowspan='3'>" + ap.apLocation + "</td>";
					}
				} else {
					html += "<td >" + ap.apLocation + "</td>";
				}
			}
		}

		html += "</tr>";
	}
	return html;
};
function getReportImage(data, needSave, flag, callback) {
	if (!imageData[data.floorId])
		imageData[data.floorId] = {};
	if (data.floorType == 1) {
        draw_outdoor(callback);
    }else{
	var result = calculateScope(data);
	var minx = result.minx, maxx = result.maxx, miny = result.miny, maxy = result.maxy;
	var sum = Math.round(result.sum);

	var unit = data.unit == 0 ? "m&sup2" : "ft&sup2";
	imageData[data.floorId]['sum'] = "Coverage area:" + sum + unit;
	  imageData[data.floorId].meshGroups = data.meshGroups;
	var translateOffX = (maxx - minx + 40) / 2 - (maxx + minx) / 2;
	var translateOffY = (maxy - miny + 40) / 2 - (maxy + miny) / 2;
	var options = {
		canvasScale : 1,
		translateOffX : translateOffX,
		translateOffY : translateOffY,
		labelshow : {
			name : true,
			modelName : true,
			channel : true
		},
		rulescale : data.scale,
		stepPX : 100,
		ruleunit : data.unit,
		stepmeterfeet : 25
	};

	calculateStep(options);

	if (flag == "origin") {
		drawBmap(function(offscreenContext) {
			imageData[data.floorId]['origin'] = offscreenContext.canvas
					.toDataURL("image/png");
			if (needSave) {
				var param = {
					imgData : imageData[data.floorId]['origin'],
					floorId : data.floorId,
					flag : 'origin'
				};
				doActionParam(loader.Request.SaveReportImage, param, function(
						data) {
					if (callback) {
						callback();
					}
				});
			}
		});
	}
	if (!flag || flag == "environment") {
		drawBmap(function(offscreenContext) {
			draw_environment(offscreenContext, callback);
		});
	}
	if (!flag || flag == "apLocation") {
		drawBmap(function(offscreenContext) {
			draw_apLocation(offscreenContext, callback);
		});
	}
	if (!flag || flag == "wdsMode") {
		drawBmap(function(offscreenContext) {
			draw_wdsMode(offscreenContext, "24", function() {
				drawBmap(function(offscreenContext) {
					draw_wdsMode(offscreenContext, "5", callback);
				});
			});
		});

	}
    if (!flag || flag == "meshMode") {
  	  imageData[data.floorId]['meshMode'] = [];
      if (data.meshGroups) {
          drawMesh(0, callback);
      }else{
      	 if (callback) {
               callback();
           }
      }

      function drawMesh(i, callback) {
          if (i < data.meshGroups.length) {
              drawBmap(function (offscreenContext) {
                  draw_meshMode(offscreenContext, data.meshGroups[i], function () {
                      drawMesh(++i, callback);
                  });
              });
          } else {
              if (callback) {
                  callback();
              }
          }
      }

  }
	if (!flag || flag == "signalCoverage") {
		drawBmap(function(offscreenContext) {
			draw_coverage(offscreenContext, "24", function() {
				drawBmap(function(offscreenContext) {
					draw_coverage(offscreenContext, "5", function() {
						drawBmap(function(offscreenContext) {
							draw_coverage(offscreenContext, "6", callback);
						});
					});
				});
			});
		});

	}
}

	function drawBmap(callback) {

		var offscreenCanvas = document.createElement('canvas');
		offscreenCanvas.width = maxx - minx + 40;
		offscreenCanvas.height = maxy - miny + 70;
		var offscreenContext = offscreenCanvas.getContext('2d');

		/*
		 * offscreenContext.setTransform(1, 0, 0, 1, 0, 0);
		 * offscreenContext.clearRect(0, 0, offscreenCanvas.width,
		 * offscreenCanvas.height);
		 */

		offscreenContext.translate(translateOffX, translateOffY);

		var bmap = mapImages.get(data.floorId);
		if (bmap != null) {
			offscreenContext.drawImage(bmap.image, bmap.px, bmap.py, bmap.pw,
					bmap.ph);
			callback(offscreenContext);
		} else if (data.path) {
			var image = new Image;
			image.crossOrigin = "Anonymous";
			image.src = data.path + "?" + Math.random();
			image.onload = function() {
				offscreenContext.drawImage(this, data.imagex, data.imagey,
						data.imagew, data.imageh);

				callback(offscreenContext);
			};
		}
	}
	 function draw_outdoor(callback) {

	        var imagePath = "https://maps.googleapis.com/maps/api/staticmap?center=" +
	            data.latitude + "," + data.longitude + "&zoom=" + data.zoom + "&size=640x400&markers=" +
	            data.latitude + "," + data.longitude + "&key=" + global.googleAPIKey;

	        // imageData[data.floorId]['outdoor'] = imagePath;

	        var offscreenCanvas = document.createElement('canvas');
	        offscreenCanvas.width = 640;
	        offscreenCanvas.height = 400;
	        var offscreenContext = offscreenCanvas.getContext('2d');

	        var image = new Image;
	        image.crossOrigin = "Anonymous";
	        image.src = imagePath;
	        image.onload = function () {
	            offscreenContext.drawImage(this, 0, 0, 640, 400);
	            imageData[data.floorId]['outdoor'] = offscreenContext.canvas
	                .toDataURL("image/png");

	            if (needSave) {
	                var param = {
	                    imgData: imageData[data.floorId]['outdoor'],
	                    floorId: data.floorId,
	                    flag: 'outdoor'
	                };
	                doActionParam(loader.Request.SaveReportImage, param, function (data) {
	                    if (callback) {
	                        callback();
	                    }
	                });
	            } else {
	                if (callback) {
	                    callback();
	                }
	            }
	        };


	    }
	function draw_environment(offscreenContext, callback) {

		offscreenContext.save();
		offscreenContext.setTransform(1, 0, 0, 1, 0, 0);
		drawRule(offscreenContext, options.stepPX, options.stepmeterfeet,
				options.ruleunit);
		offscreenContext.restore();

		options.showWDS = false;
		if (data.obList) {
			data.obList.forEach(function(value) {
				if (value.obType == TYPE_RECT_ZONE) {
					var ob = new Zone(value);
					ob.fill(offscreenContext, options);
					ob.stroke(offscreenContext, options);
				}
			});
			data.obList.forEach(function(value) {
				if (value.obType == TYPE_RECT_AREA) {
					var ob = new Area(value);
					ob.fill(offscreenContext, options);
					ob.stroke(offscreenContext, options);
				}
				if (value.obType == TYPE_RECT_WALL) {
					var ob = new Obstacle(value);
					ob.fill(offscreenContext, options);
					ob.stroke(offscreenContext, options);
				}
			});
		}

		imageData[data.floorId]['environment'] = offscreenContext.canvas
				.toDataURL("image/png");
		if (needSave) {
			var param = {
				imgData : imageData[data.floorId]['environment'],
				floorId : data.floorId,
				flag : 'environment'
			};
			doActionParam(loader.Request.SaveReportImage, param,
					function(data) {
						if (callback) {
							callback();
						}
					});
		} else {
			if (callback) {
				callback();
			}
		}

		// window.open(offscreenContext.canvas.toDataURL("image/png"));
	}

	function draw_apLocation(offscreenContext, callback) {
		offscreenContext.save();
		offscreenContext.setTransform(1, 0, 0, 1, 0, 0);
		drawRule(offscreenContext, options.stepPX, options.stepmeterfeet,
				options.ruleunit);

		options.showWDS = false;

		var temp = [];
		if (data.apList) {
			data.apList.forEach(function(value) {
				var ap = new AP(value);
				ap.fill(offscreenContext, options);
				ap.stroke(offscreenContext, options);
				temp.push(ap);
			});
			imageData[data.floorId]['apCount'] = data.apList.length;
		}
		if (data.atList) {
			data.atList.forEach(function(value) {
				for (var i = 0; i < temp.length; i++) {
					if (temp[i].apId == value.apId) {
						var at = new Antenna(value);
						at.fill(offscreenContext, options, temp[i]);
						at.stroke(offscreenContext, options);
						break;
					}
				}

			});
		}
		offscreenContext.restore();

		imageData[data.floorId]['apLocation'] = offscreenContext.canvas
				.toDataURL("image/png");
		if (needSave) {
			var param = {
				imgData : imageData[data.floorId]['apLocation'],
				floorId : data.floorId,
				flag : 'apLocation'
			};
			doActionParam(loader.Request.SaveReportImage, param,
					function(data) {
						if (callback) {
							callback();
						}
					});
		} else {
			if (callback) {
				callback();
			}
		}

	}

	function draw_wdsMode(offscreenContext, band, callback) {

		options.showWDS = true;
		options.currentBand = band;
		offscreenContext.save();
		offscreenContext.setTransform(1, 0, 0, 1, 0, 0);

		var temp = [];
		if (data.apList) {
			data.apList.forEach(function(value) {
				var ap = new AP(value);
				ap.fill(offscreenContext, options);
				ap.stroke(offscreenContext, options);
				temp.push(ap);
			});
		}
		if (data.atList) {
			data.atList.forEach(function(value) {
				var ap = getAP(value.apId);
				if (ap != null) {
					var at = new Antenna(value);
					at.fill(offscreenContext, options, ap);
					at.stroke(offscreenContext, options);
				}

			});
		}

		if (data.wdsList) {
			var count1 = 0;
			data.wdsList
					.forEach(function(value) {
						if ((value.band == "2.4" && options.currentBand == "24")
								|| (value.band == "5.0" && options.currentBand == "5")) {
							count1++;
							var wdsLine = new WDSLine(value);
							var ap1 = getAP(wdsLine.apId1);
							var ap2 = getAP(wdsLine.apId2);

							if (ap1 && ap2) {
								wdsLine.x1 = ap1.px;
								wdsLine.y1 = ap1.py;
								wdsLine.x2 = ap2.px;
								wdsLine.y2 = ap2.py;

								var distance = Math.sqrt(Math.pow(wdsLine.x2
										- wdsLine.x1, 2)
										+ Math.pow(wdsLine.y2 - wdsLine.y1, 2));
								wdsLine.distance = Math.round(distance
										* options.rulescale);
								var jsondata = {
									floorId : data.floorId,
									apId1 : ap1.apId,
									apId2 : ap2.apId,
									band : wdsLine.band
								};
								doActionParam(loader.Request.getWDSWeight,
										jsondata, function(data) {
											wdsLine.performance = Math
													.round(data.data);
											wdsLine.stroke(offscreenContext,
													options);
											count1--;
										});
							} else {
								count1--;
							}

						}
					});

			var interval1 = setInterval(
					function() {
					
						if (count1 <= 0) {
							clearInterval(interval1);
							offscreenContext.restore();
							console.log("finish");
							imageData[data.floorId]['wdsMode' + band] = offscreenContext.canvas
									.toDataURL("image/png");
							if (needSave) {
								var param = {
										floorId : data.floorId,										
										flag : 'wdsMode' + band,
									imgData : imageData[data.floorId]['wdsMode'
											+ band]
								};
								doActionParam(loader.Request.SaveReportImage,
										param, function(data) {
											if (callback) {
												callback();
											}
										});
							} else {
								if (callback) {
									callback();
								}
							}

						}
					}, 200);
		}

		function getAP(apId) {
			for (var i = 0; i < temp.length; i++) {
				if (temp[i].apId == apId) {
					return temp[i];
				}
			}
		}

	}
	  function draw_meshMode(offscreenContext, meshGroup, callback) {

	        options.showMesh = true;
	        options.currentMeshGroup = meshGroup;
	        if (meshGroup.bandName == "2.4")
	            options.currentBand = "24";
	        else options.currentBand = "5";
	        offscreenContext.save();
	        offscreenContext.setTransform(1, 0, 0, 1, 0, 0);


	        if (data.apList) {
	            var count = 0;
	            for (var i = 0; i < data.apList.length; i++) {
	                if (!isInCurrentMesh(options, data.apList[i]))
	                    continue;
	                for (var j = i + 1; j < data.apList.length; j++) {
	                    if (!isInCurrentMesh(options, data.apList[j]))
	                        continue;
	                    count++;                   
	                    var meshLine = new MeshLine({
	                        apId1: data.apList[i].apId,
	                        apId2: data.apList[j].apId,
	                        band: options.currentBand,
	                        x1: data.apList[i].px,
	                        y1: data.apList[i].py,
	                        x2: data.apList[j].px,
	                        y2: data.apList[j].py

	                    });                   
	                    var distance = Math.sqrt(Math.pow(meshLine.x2 - meshLine.x1, 2)
	                        + Math.pow(meshLine.y2 - meshLine.y1, 2));
	                    meshLine.distance = Math.round(distance * options.rulescale);
	                    
	                    (function(meshLine){
	                    	var jsondata = {
	                                floorId: data.floorId,
	                                apId1: meshLine.apId1,
	                                apId2: meshLine.apId2,
	                                band: meshLine.band
	                            };
	                    	 doActionParam(loader.Request.getWDSWeight, jsondata, function (data) {
	                             if (!data)
	                                 return;
	                             meshLine.performance = Math.round(data.data);
	                             meshLine.stroke(offscreenContext, options);
	                             count--;                       
	                         });
	                    })(meshLine);
	                   


	                }
	            }
	        }


	        var interval = setInterval(
	            function () {
	                if (count <= 0) {
	                    clearInterval(interval);

	                    if (data.apList) {
	                        data.apList.forEach(function (value) {
	                            var ap = new AP(value);
	                            ap.fill(offscreenContext, options);
	                            ap.stroke(offscreenContext, options);
	                        });
	                    }
	                    if (data.atList) {
	                        data.atList.forEach(function (value) {
	                            var ap = getAP(value.apId);
	                            if (ap != null) {
	                                var at = new Antenna(value);
	                                at.fill(offscreenContext, options, ap);
	                                at.stroke(offscreenContext, options);
	                            }

	                        });
	                    }

	                    offscreenContext.restore();

	                    var imgData = offscreenContext.canvas.toDataURL("image/png");
	                    imageData[data.floorId]['meshMode'].push({
	                    	meshId:meshGroup.meshId,
	                        meshSSID: meshGroup.meshSSID,
	                        path: imgData
	                    });
	                  /*  imageData[data.floorId]['meshMode' + options.currentBand].push({
	                        meshSSID: meshGroup.meshSSID,
	                        path: imgData
	                    });*/

	                    if (needSave) {
	                        var param = {	                           
	                            floorId: data.floorId,
	                            flag: 'mesh',
	                            meshId: meshGroup.meshId,
	                            imgData: imgData
	                        };
	                        doActionParam(loader.Request.SaveReportImage, param, function (data) {
	                            if (callback) callback();
	                        });

	                    } else {
	                        if (callback)
	                            callback();
	                    }

	                }
	            }, 200);


	    }
	function draw_coverage(offscreenContext, band, callback) {

		options.showWDS = false;
		options.showheatmap = true;
		options.currentBand = band;

		if (data.obList) {
			data.obList.forEach(function(value) {
				if (value.obType == TYPE_RECT_ZONE) {
					var ob = new Zone(value);
					ob.fill(offscreenContext, options);
					ob.stroke(offscreenContext, options);
				}
			});
			data.obList.forEach(function(value) {
				if (value.obType == TYPE_RECT_AREA) {
					var ob = new Area(value);
					ob.fill(offscreenContext, options);
					ob.stroke(offscreenContext, options);
				}
				if (value.obType == TYPE_RECT_WALL) {
					var ob = new Obstacle(value);
					ob.fill(offscreenContext, options);
					ob.stroke(offscreenContext, options);
				}
			});
		}

		var span = 8;
		var reportHeatArray = [];

		var param = {
			workareaX : 0 - translateOffX,
			workareaY : 0 - translateOffY,
			workareaX2 : offscreenContext.canvas.width - translateOffX,
			workareaY2 : offscreenContext.canvas.height - translateOffY,
			canvasScale : options.canvasScale,
			"floorId" : data.floorId,
			"band" : band,
			"channel" : "All",
			"miniDbm" : ""
		};
		doActionParam(loader.Request.FloorShowHeap, param, function(data) {
			if (data && data.success) {

				span = data.data;
				reportHeatArray = data.pixelList;
				drawHeatmap(band);

			} else {

				reportHeatArray = [];
				drawHeatmap(band);
			}
		});

		function drawHeatmap(band) {
			offscreenContext.save();
			offscreenContext.globalAlpha = 0.7;

			reportHeatArray.forEach(function(item, i) {
				var dbm = item.w;

				if (dbm < -75)
					return;
				if (dbm > -25)
					dbm = -25;

				var index = Math.abs(parseInt(dbm) + 25);
				if (index < 0)
					index = 0;
				if (index > 49)
					index = 49;

				offscreenContext.fillStyle = COLORArray[index];
				offscreenContext.fillRect(item.x - span / 2, item.y - span / 2,
						span, span);
			});
			offscreenContext.restore();
			imageData[data.floorId]['coverage' + band] = offscreenContext.canvas
					.toDataURL("image/png");
			if (needSave) {
				var param = {
					imgData : imageData[data.floorId]['coverage' + band],
					floorId : data.floorId,
					flag : 'coverage' + band
				};
				doActionParam(loader.Request.SaveReportImage, param, function(
						data) {
					if (callback)
						callback();
				});

			} else {
				if (callback)
					callback();
			}

		}

	}

}

function calculateScope(data) {
	var minx = 0, maxx = 0, miny = 0, maxy = 0;
	var sum = 0;
	if (data.path) {
		if (data.imagex < minx)
			minx = data.imagex;
		else if (data.imagex > maxx)
			maxx = data.imagex;

		if (data.imagex + data.imagew < minx)
			minx = data.imagex + data.imagew;
		else if (data.imagex + data.imagew > maxx)
			maxx = data.imagex + data.imagew;

		if (data.imagey < miny)
			miny = data.imagey;
		else if (data.imagey > maxy)
			maxy = data.imagey;

		if (data.imagey + data.imageh < miny)
			miny = data.imagey + data.imageh;
		else if (data.imagey + data.imageh > maxy)
			maxy = data.imagey + data.imageh;
	}
	if (data.apList) {
		data.apList.forEach(function(value) {

			if (value.px - 40 < minx)
				minx = value.px - 40;
			else if (value.px + 40 > maxx)
				maxx = value.px + 40;

			if (value.py - 40 < miny)
				miny = value.py - 40;
			else if (value.py + 40 > maxy)
				maxy = value.py + 40;
		});
	}
	if (data.atList) {
		data.atList.forEach(function(value) {

			if (value.px < minx)
				minx = value.px;
			else if (value.px > maxx)
				maxx = value.px;

			if (value.py < miny)
				miny = value.py;
			else if (value.py > maxy)
				maxy = value.py;
		});
	}
	if (data.obList) {
		data.obList
				.forEach(function(value) {

					if (value.obType == TYPE_RECT_ZONE
							|| value.obType == TYPE_RECT_AREA) {
						if (value.px < minx)
							minx = value.px;
						else if (value.px > maxx)
							maxx = value.px;

						if (value.px + value.pw < minx)
							minx = value.px + value.pw;
						else if (value.px + value.pw > maxx)
							maxx = value.px + value.pw;

						if (value.py < miny)
							miny = value.py;
						else if (value.py > maxy)
							maxy = value.py;

						if (value.py + value.ph < miny)
							miny = value.py + value.ph;
						else if (value.py + value.ph > maxy)
							maxy = value.py + value.ph;

						if (value.obType == TYPE_RECT_ZONE
								&& value.obField != "nonap") {
							sum += (value.pw * data.scale)
									* (value.ph * data.scale);
						}
					} else if (value.obType && value.obType == TYPE_RECT_WALL) {

						if (value.px < minx)
							minx = value.px;
						else if (value.px > maxx)
							maxx = value.px;

						if (value.pw < minx)
							minx = value.pw;
						else if (value.pw > maxx)
							maxx = value.pw;

						if (value.py < miny)
							miny = value.py;
						else if (value.py > maxy)
							maxy = value.py;

						if (value.ph < miny)
							miny = value.ph;
						else if (value.ph > maxy)
							maxy = value.ph;
					}

				});
	}
	return {
		minx : minx,
		maxx : maxx,
		miny : miny,
		maxy : maxy,
		sum : sum
	};
}
