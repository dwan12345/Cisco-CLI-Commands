/**
 * 
 */

var AP = function(obj) {

	this.Id = obj.apId;
	this.apId = obj.apId;
	this.px = obj.px;
	this.py = obj.py;
	this.floorId = obj.floorId;
	this.apModel = obj.apModel;
	this.apName = obj.apName === undefined ? "" : obj.apName;
	this.apLocation = obj.apLocation === undefined ? "" : obj.apLocation;
	this.protocol = obj.protocol === undefined ? "" : obj.protocol;
	this.content = obj.content === undefined ? "" : obj.content;
	this.apIPAddress = obj.apIPAddress === undefined ? "" : obj.apIPAddress;

	this.angle = obj.angle === undefined ? 0 : obj.angle;// 弧度
	this.antennaType = obj.antennaType === undefined ? 0 : obj.antennaType;// 0全向，不能旋转
	this.apType = obj.apType === undefined ? 0 : obj.apType;
	this.attachedId = obj.attachedId;
	this.rectLength = SIDELENGTH_AP;

	this.bandList = [];

	if (obj.bandList !== undefined) {
		for (var j = 0; j < obj.bandList.length; j++) {
			var band = {};
			band.id = obj.bandList[j].id;
			band.floorId = obj.bandList[j].floorId;
			band.apId = obj.bandList[j].apId;
			band.rf = obj.bandList[j].rf;
			band.model = obj.bandList[j].model;
			band.gt = obj.bandList[j].gt;
			band.gr = obj.bandList[j].gr;
			band.lft = obj.bandList[j].lft;
			band.lfr = obj.bandList[j].lfr;
			band.pattern = obj.bandList[j].pattern;
			band.bandName = obj.bandList[j].bandName;
			band.enable = obj.bandList[j].enable;
			band.channel = obj.bandList[j].channel;
			band.protocol = obj.bandList[j].protocol;
			band.pt = obj.bandList[j].pt;
			band.defaultPt = obj.bandList[j].defaultPt;
			band.apMode = obj.bandList[j].apMode;
			band.channelSize = obj.bandList[j].channelSize;
			band.wds = obj.bandList[j].wds;
			band.externalAt = obj.bandList[j].externalAt;
			band.advisor = obj.bandList[j].advisor;
			band.wdsMode = obj.bandList[j].wdsMode;
			band.mesh = obj.bandList[j].mesh;
			band.meshSSID = obj.bandList[j].meshSSID;
			//band.meshPSK = obj.bandList[j].meshPSK;
			if (band.bandName == "2.4") {
				this.support24 = true;
				this.wds24 = band.wds == 1;
			} else if (band.bandName == "5.0") {
				this.support5 = true;
				this.wds5 = band.wds == 1;
			} else if (band.bandName == "6.0") {
				this.support6 = true;
				this.wds6 = band.wds == 1;
			}

			this.bandList.push(band);
		}
	}

	this.bandType = obj.bandType === undefined ? 0 : obj.bandType;
};

AP.prototype = {
	tooltip : function() {

		var channel = "";
		if (this.bandList !== undefined) {
			for (var j = 0; j < this.bandList.length; j++) {
				var band = this.bandList[j];
				if (band.enable == 0) {
					if (band.rf == 2.4) {
						if (channel != "")
							channel += " / ";
						channel += band.channel + " (2.4GHz)";
					} else if (band.rf == 5) {
						if (channel != "")
							channel += " / ";
						channel += band.channel + " (5GHz)";
					} else if (band.rf == 6) {
						if (channel != "")
							channel += " / ";
						channel += band.channel + " (6GHz)";
					}
				}
			}
		}

		return this.apName + "\r\n" + this.apModel + "\r\n" + channel;
	},

	supportWDS : function(options) {
		return (options.currentBand == "24" && this.wds24)
				|| (options.currentBand == "5" && this.wds5);

	},

	spx : function() {
		return this.px * this.options.canvasScale + this.options.translateOffX;
	},
	spy : function() {
		return this.py * this.options.canvasScale + this.options.translateOffY;
	},

	createPath : function(context, options) {
		this.options = options;
		context.beginPath();
		context.rect(this.spx() - this.rectLength / 2, this.spy()
				- this.rectLength / 2, this.rectLength, this.rectLength);
		context.closePath();
	},

	inRotatePath : function(context, mouseloc) {

		if (this.antennaType == 0)
			return false;
		context.strokeStyle = "#2095f2";

		context.beginPath();
		context.rect(this.spx() - 35, this.spy(), 7, 12);
		context.closePath();

		if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

			context.canvas.style.cursor = CURSOR_ROTATE;
			return true;
		}
		context.beginPath();
		context.rect(this.spx() - 6, this.spy() - 36, 12, 7);
		context.closePath();

		if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

			context.canvas.style.cursor = CURSOR_ROTATE;
			return true;
		}
		context.beginPath();
		context.rect(this.spx() + 28, this.spy() - 6, 7, 12);
		context.closePath();

		if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

			context.canvas.style.cursor = CURSOR_ROTATE;
			return true;
		}
		context.beginPath();
		context.rect(this.spx() - 6, this.spy() + 29, 12, 7);
		context.closePath();

		if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

			context.canvas.style.cursor = CURSOR_ROTATE;
			return true;
		}
		return false;

	},

	inWDSPath : function(context, mouseloc) {

		context.beginPath();
		context.arc(this.spx(), this.spy(), 18, 0, Math.PI * 2);
		context.closePath();

		if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

			context.canvas.style.cursor = "crosshair";
			return true;
		}
		return false;
	},

	stroke : function(context, options, sel) {

		this.options = options;
		context.save();

		var alpha = 1.0;
		if (options.currentBand == "24" && !this.support24) {
			alpha = 0.5;
		} else if (options.currentBand == "5" && !this.support5) {
			alpha = 0.5;
		} else if (options.currentBand == "6" && !this.support6) {
			alpha = 0.5;
		} else if (options.showWDS && this.supportWDS(options) != true) {
			alpha = 0.5;
		} else if (options.showMesh && options.currentMeshGroup) {
			var supportMesh = false;

			if (this.bandList !== undefined
					&& this.apType == options.currentMeshGroup.apType) {

				for (var j = 0; j < this.bandList.length; j++) {
					if (options.currentMeshGroup.bandName == "2.4"
							&& this.bandList[j].bandName == "2.4"
							&& this.bandList[j].mesh == 1) {
						supportMesh = true;
					} else if (options.currentMeshGroup.bandName == "5.0"
							&& this.bandList[j].bandName == "5.0"
							&& this.bandList[j].mesh == 1) {
						supportMesh = true;
					}
				}
			}

			if (supportMesh != true) {
				alpha = 0.5;
			}
		}
		var w = 80;
		context.textAlign = "start";
		context.textBaseline = "middle";
		context.font = "bold 11px Arial";

		var txt = [];
		if (options.labelshow.name && this.apName != "") {
			txt.push(this.apName);
		}
		if (options.labelshow.modelName && this.apModel != "") {
			txt.push(this.apModel);
			var w1 = context.measureText(this.apModel).width + 16;
			if (w1 > w)
				w = w1;
		}
		var band24 = null, band5 = null, band6 = null;
		if (options.labelshow.channel) {
			for (var i = 0; i < this.bandList.length; i++) {
				if (this.bandList[i].bandName == "2.4") {
					band24 = this.bandList[i];

				} else if (this.bandList[i].bandName == "5.0") {
					band5 = this.bandList[i];
				} 
				else if (this.bandList[i].bandName == "6.0") {
					band6 = this.bandList[i];
				}
			}
			if (band24) {
				txt.push("2.4GHz" + band24.channel);
			}
			if (band5) {
				txt.push("5GHz" + band5.channel);
			}
			if (band6) {
				txt.push("6GHz" + band6.channel);
			}
		}
		if (txt.length > 0) {
			var lineHeight = 13;

			var line = txt.length;
			context.beginPath();
			context
					.moveTo(this.spx() - w / 2, this.spy() + this.rectLength
							/ 2);
			context
					.lineTo(this.spx() + w / 2, this.spy() + this.rectLength
							/ 2);
			context.lineTo(this.spx() + w / 2, this.spy() + this.rectLength / 2
					+ lineHeight * line + 16);
			context.lineTo(this.spx() - w / 2, this.spy() + this.rectLength / 2
					+ lineHeight * line + 16);
			context.closePath();
			context.lineWidth = 1;
			if (this.apId != "" && options.mouseoverId == this.apId) {
				context.lineWidth = 2;
			}
			context.strokeStyle = "rgba(0,0,0," + alpha + ")";
			context.globalAlpha = 0.85;
			context.shadowColor = "rgba(0,0,0," + alpha + ")";
			context.shadowOffsetX = 1;
			context.shadowOffsetY = 1;
			context.shadowBlur = 8;
			context.stroke();
			context.restore();
			context.save();
			context.fillStyle = "rgba(255,255,255," + alpha + ")";
			context.fill();

			context.fillStyle = "rgba(0,0,0," + alpha + ")";

			var height = 18;
			if (options.labelshow.name && this.apName != "") {
				context.font = "11px Arial";
				var apName = this.apName;
				var maxLength = 8;
				if (options.labelshow.modelName && this.apModel != "") {
					maxLength = this.apModel.length;
				}
				if (apName.length > maxLength) {
					apName = apName.substring(0, maxLength) + "...";
				}

				context.fillText(apName, this.spx() - w / 2 + 8, this.spy()
						+ this.rectLength / 2 + height);
				height += lineHeight;
			}
			if (options.labelshow.modelName && this.apModel != "") {
				context.font = "bold 11px Arial";
				context.fillText(this.apModel, this.spx() - w / 2 + 8, this
						.spy()
						+ this.rectLength / 2 + height);
				height += lineHeight;
			}
			if (options.labelshow.channel) {
				if (band24) {
					context.font = "11px Arial";
					context.fillText("2.4GHz", this.spx() - w / 2 + 8, this.spy()
							+ this.rectLength / 2 + height);
					var x = context.measureText("2.4GHz").width;
					if (band24.enable == 0)
						context.fillStyle = "rgba(223,63,251," + alpha + ")";
					else
						context.fillStyle = "rgba(119,119,119," + alpha + ")";
					context.fillText(band24.channel, this.spx() - w / 2 + 16
							+ x, this.spy() + this.rectLength / 2 + height);
					height += lineHeight;
				}
				if (band5) {
					context.font = "11px Arial";
					context.fillStyle = "rgba(0,0,0," + alpha + ")";
					context.fillText("5GHz", this.spx() - w / 2 + 18, this.spy()
							+ this.rectLength / 2 + height);
					var x = context.measureText("5GHz").width;
					if (band5.enable == 0)
						context.fillStyle = "rgba(0,169,157," + alpha + ")";
					else
						context.fillStyle = "rgba(119,119,119," + alpha + ")";
					context.fillText(band5.channel,
							this.spx() - w / 2 + 26 + x, this.spy()
									+ this.rectLength / 2 + height);
				}
				if (band6) {
					height += lineHeight;
					context.font = "11px Arial";
					context.fillStyle = "rgba(0,0,0," + alpha + ")";
					context.fillText("6GHz", this.spx() - w / 2 + 18, this.spy()
							+ this.rectLength / 2 + height);
					var x = context.measureText("6GHz").width;
					if (band6.enable == 0)
						context.fillStyle = "rgba(0,169,157," + alpha + ")";
					else
						context.fillStyle = "rgba(119,119,119," + alpha + ")";
					context.fillText(band6.channel,
							this.spx() - w / 2 + 26 + x, this.spy()
									+ this.rectLength / 2 + height);
				}
			}
		}

		context.restore();

	},

	fill : function(context, options, sel) {

		this.options = options;
		context.save();
		var alpha = 1;
		if (options.currentBand == "24" && !this.support24) {
			alpha = 0.5;
		} else if (options.currentBand == "5" && !this.support5) {
			alpha = 0.5;
		} else if (options.currentBand == "6" && !this.support6) {
			alpha = 0.5;
		} else if (options.showWDS && this.supportWDS(options) != true) {
			alpha = 0.5;
		} else if (options.showMesh && options.currentMeshGroup) {
			if (this.bandList !== undefined) {
				for (var j = 0; j < this.bandList.length; j++) {
					if (options.currentMeshGroup.bandName == "2.4"
							&& this.bandList[j].bandName == "2.4"
							&& this.bandList[j].mesh != 1) {
						alpha = 0.5;
					} else if (options.currentMeshGroup.bandName == "5.0"
							&& this.bandList[j].bandName == "5.0"
							&& this.bandList[j].mesh != 1) {
						alpha = 0.5;
					}

				}
			}
		}
		context.globalAlpha = alpha;

		if (this.attachedId) {
			context.drawImage(iconimages.apExtImage, parseInt(this.spx()
					- SIDELENGTH_AP / 2), parseInt(this.spy() - SIDELENGTH_AP
					/ 2));

		} else {
			if (this.antennaType == 0) {
				context.drawImage(iconimages.apImage, parseInt(this.spx()
						- SIDELENGTH_AP / 2), parseInt(this.spy()
						- SIDELENGTH_AP / 2));

			} else {
				if (this.angle == 0) {
					context.drawImage(iconimages.apDirectImage, parseInt(this
							.spx()
							- SIDELENGTH_AP / 2), parseInt(this.spy()
							- SIDELENGTH_AP / 2));
				} else {
					context.save();
					context.translate(this.spx(), this.spy());
					context.rotate(this.angle);

					context.drawImage(iconimages.apDirectImage,
							parseInt(-SIDELENGTH_AP / 2),
							parseInt(-SIDELENGTH_AP / 2));

					context.restore();
				}
			}
		}
		if (options.currentMeshGroup && options.currentMeshGroup.meshSSID) {
			if (isInCurrentMesh(options, this)) {
				context.strokeStyle = "#FF791A";
				context.lineWidth = 5;
				context.beginPath();
				context.arc(this.spx(), this.spy(), 16, 0, Math.PI * 2);
				context.closePath();
				context.stroke();
			} else if (isInMesh(this)) {
				context.strokeStyle = "rgba(255,121,26,0.4)";
				context.lineWidth = 5;
				context.beginPath();
				context.arc(this.spx(), this.spy(), 16, 0, Math.PI * 2);
				context.closePath();
				context.stroke();
			}

		}

		if (sel || options.mouseoverId === this.apId) {
			context.strokeStyle = "#2095f2";
			context.lineWidth = 3;

			// this.createPath(context, options);
			context.beginPath();
			context.arc(this.spx(), this.spy(), 24.5, 0, Math.PI * 2);
			context.closePath();
			context.stroke();

			if (options.showWDS && this.supportWDS(options) == true) {
				context.fillStyle = "#47afe8";
				context.beginPath();
				context.arc(this.spx(), this.spy(), 6, 0, Math.PI * 2);
				context.fill();
			}
		} else if (wdsLine.apId1 && options.showWDS
				&& this.supportWDS(options) == true) {
			context.fillStyle = "#47afe8";
			context.beginPath();
			context.arc(this.spx(), this.spy(), 6, 0, Math.PI * 2);
			context.fill();

		}
		if (sel && !options.showWDS) {
			if (this.antennaType != 0) {
				context.drawImage(iconimages.apleft, this.spx() - 35, this
						.spy() - 3, 7, 12);
				context.drawImage(iconimages.aptop, this.spx() - 6,
						this.spy() - 36, 12, 7);
				context.drawImage(iconimages.apright, this.spx() + 28, this
						.spy() - 6, 7, 12);
				context.drawImage(iconimages.apbottom, this.spx() - 6, this
						.spy() + 29, 12, 7);
			}

			delbtn.style.left = this.spx() + this.rectLength / 2 + 7 + "px";
			delbtn.style.top = this.spy() - this.rectLength / 2 - 20 + "px";
			delbtn.style.display = "inline";

		}

		context.restore();

	}

};