var Area = function(obj) {
	this.Id = obj.obId;
	this.obId = obj.obId === undefined ? 0 : obj.obId;
	this.px = obj.px === undefined ? 0 : obj.px;
	this.py = obj.py === undefined ? 0 : obj.py;
	this.pw = obj.pw === undefined ? 0 : obj.pw;
	this.ph = obj.ph === undefined ? 0 : obj.ph;
	this.obType = obj.obType;
	this.obField = obj.obField;
	this.floorId = obj.floorId;
	this.rate = obj.rate === undefined ? 0 : obj.rate;
};

Area.prototype.tooltip = function() {
	return obText[this.obField].replace("%s", this.rate);
};

Area.prototype.createPath = function(context) {

	var w = 5;
	context.beginPath();
	context.moveTo(this.px - w, this.py - w);
	context.lineTo(this.px + this.pw + w, this.py - w);
	context.lineTo(this.px + this.pw + w, this.py + this.ph + w);
	context.lineTo(this.px - w, this.py + this.ph + w);
	context.lineTo(this.px - w, this.py - w);

	context.lineTo(this.px + w, this.py + w);
	context.lineTo(this.px + w, this.py + this.ph - w);
	context.lineTo(this.px + this.pw - w, this.py + this.ph - w);
	context.lineTo(this.px + this.pw - w, this.py + w);
	context.lineTo(this.px + 3, this.py + w);
	context.closePath();

};

Area.prototype.inResizePath = function(context, mouseloc) {

	var len = 5;
	context.beginPath();
	context.rect(this.px - len, this.py - len, len * 2, len * 2);
	context.closePath();
	if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

		context.canvas.style.cursor = 'nw-resize';
		return "lefttop";
	}

	context.beginPath();
	context.rect(this.px + this.pw - len, this.py - len, len * 2, len * 2);
	context.closePath();
	if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

		context.canvas.style.cursor = 'ne-resize';
		return "righttop";
	}

	context.beginPath();
	context.rect(this.px + this.pw - len, this.py + this.ph - len, len * 2,
			len * 2);
	context.closePath();
	if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

		context.canvas.style.cursor = 'se-resize';
		return "rightbottom";
	}

	context.beginPath();
	context.rect(this.px - len, this.py + this.ph - len, len * 2, len * 2);
	context.closePath();
	if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

		context.canvas.style.cursor = 'sw-resize';
		return "leftbottom";
	}
	return null;

};

Area.prototype.stroke = function(context, options, selbtn) {

	context.save();

	context.strokeStyle = getRectColor(this.obField, 2);
	context.lineWidth = LINEWIDTH_AREA_STROKE;

	// 被选中的对象绘制阴影效果
	if (selbtn || (this.obId != "" && options.mouseoverId == this.obId)) {

		var len = 4.5;

		context.beginPath();
		context.rect(this.px, this.py, this.pw, this.ph);
		context.closePath();
		context.stroke();

		context.fillStyle = context.strokeStyle;
		context.beginPath();
		context.rect(this.px - len, this.py - len, len * 2, len * 2);
		context.rect(this.px + this.pw - len, this.py - len, len * 2, len * 2);
		context.rect(this.px + this.pw - len, this.py + this.ph - len, len * 2,
				len * 2);
		context.rect(this.px - len, this.py + this.ph - len, len * 2, len * 2);
		context.closePath();
		context.stroke();
		context.fill();

	} else {
		context.strokeRect(this.px, this.py, this.pw, this.ph);

	}

	context.restore();

	if (selbtn) {

		delbtn.style.left = (this.px + this.pw + 10) * options.canvasScale
				+ options.translateOffX + "px";
		delbtn.style.top = (this.py - 20) * options.canvasScale
				+ options.translateOffY + "px";
		delbtn.style.color = "#ced7db";
		delbtn.style.display = "inline";
	}
};

Area.prototype.fill = function(context, options) {

	context.save();

	context.strokeStyle = getRectColor(this.obField, 1);
	context.lineWidth = LINEWIDTH_AREA_IN;

	var maxSidelength = (Math.abs(this.pw) > Math.abs(this.ph)) ? Math
			.abs(this.pw) : Math.abs(this.ph);

	var count = parseInt(maxSidelength / 30);
	if (count < 2)
		count = 2;
	var spanx = this.pw / count;
	var spany = this.ph / count;

	for (var w = 0; w < count; w++) {
		drawLine(this.px + spanx * w, this.py, this.px + spanx * w, this.py
				+ this.ph, context);
	}

	for (var h = 0; h < count; h++) {
		drawLine(this.px, this.py + spany * h, this.px + this.pw, this.py
				+ spany * h, context);
	}

	context.restore();
};
