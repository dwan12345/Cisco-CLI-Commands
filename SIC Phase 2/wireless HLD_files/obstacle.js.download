var Obstacle = function(obj) {

	this.Id = obj.obId;

	this.obId = obj.obId === undefined ? 0 : obj.obId;
	/**
	 * 直线起点横坐标
	 */
	this.px = obj.px === undefined ? 0 : obj.px;
	/**
	 * 直线起点纵坐标
	 */
	this.py = obj.py === undefined ? 0 : obj.py;
	/**
	 * 直线终点横坐标（为了配合数据库字段这样命名）
	 */
	this.pw = obj.pw === undefined ? 0 : obj.pw;
	/**
	 * 直线终点纵坐标（为了配合数据库字段这样命名）
	 */
	this.ph = obj.ph === undefined ? 0 : obj.ph;
	this.obType = obj.obType;
	this.obField = obj.obField;
	this.floorId = obj.floorId;
	this.rate = obj.rate === undefined ? 0 : obj.rate;
};

Obstacle.prototype.tooltip = function() {
	return obText[this.obField].replace("%s", this.rate);
};

Obstacle.prototype.createPath = function(context) {

	var x1 = this.px;
	var y1 = this.py + LINEWIDTH_OBSTACLE_STROKE;
	var x2 = this.px;
	var y2 = this.py - LINEWIDTH_OBSTACLE_STROKE;

	var x3 = this.pw;
	var y3 = this.ph - LINEWIDTH_OBSTACLE_STROKE;
	var x4 = this.pw;
	var y4 = this.ph + LINEWIDTH_OBSTACLE_STROKE;

	if (this.ph != this.py) {

		var l = -(this.pw - this.px) / (this.ph - this.py);
		var d = LINEWIDTH_OBSTACLE_STROKE;
		var dx = Math.sqrt(Math.pow(d, 2) / (Math.pow(l, 2) + 1));
		var dy = Math.sqrt(Math.pow(d, 2) * Math.pow(l, 2)
				/ (Math.pow(l, 2) + 1));

		x1 = this.px + dx;
		y1 = this.py + dy;
		x2 = this.px - dx;
		y2 = this.py - dy;

		x3 = this.pw - dx;
		y3 = this.ph - dy;
		x4 = this.pw + dx;
		y4 = this.ph + dy;

		if (l < 0) {
			x1 = this.px + dx;
			y1 = this.py - dy;
			x2 = this.px - dx;
			y2 = this.py + dy;

			x3 = this.pw - dx;
			y3 = this.ph + dy;
			x4 = this.pw + dx;
			y4 = this.ph - dy;
		}

	}

	context.beginPath();
	context.moveTo(x1, y1);
	context.lineTo(x2, y2);
	context.lineTo(x3, y3);
	context.lineTo(x4, y4);
	context.lineTo(x1, y1);
	context.closePath();

};

Obstacle.prototype.inResizePath = function(context, mouseloc) {

	if (this.ph == this.py) {

		var left = this.px < this.pw ? this.px : this.pw;
		var right = this.px > this.pw ? this.px : this.pw;

		context.beginPath();
		context.rect(left - 3.5, this.py - 3.5, 7, 7);
		context.closePath();
		if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

			context.canvas.style.cursor = 'w-resize';
			return this.px < this.pw ? "left" : "right";
		}
		context.beginPath();
		context.rect(right - 3.5, this.ph - 3.5, 7, 7);
		context.closePath();
		if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

			context.canvas.style.cursor = 'e-resize';
			return this.px > this.pw ? "left" : "right";
		}

	} else if (this.pw == this.px) {

		var top = this.py < this.ph ? this.py : this.ph;
		var bottom = this.py > this.ph ? this.py : this.ph;

		context.beginPath();
		context.rect(this.px - 3.5, top - 3.5, 7, 7);
		context.closePath();
		if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

			context.canvas.style.cursor = 'n-resize';
			return this.py < this.ph ? "left" : "right";
		}
		context.beginPath();
		context.rect(this.pw - 3.5, bottom - 3.5, 7, 7);
		context.closePath();
		if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

			context.canvas.style.cursor = 's-resize';
			return this.py > this.ph ? "left" : "right";
		}

	} else {

		var l = -(this.pw - this.px) / (this.ph - this.py);
		var d = 3.5;
		var dx = Math.sqrt(Math.pow(d, 2) / (Math.pow(l, 2) + 1));
		var dy = Math.sqrt(Math.pow(d, 2) * Math.pow(l, 2)
				/ (Math.pow(l, 2) + 1));

		var dd = 3.5;
		var ddx = Math.sqrt(Math.pow(dd, 2) * Math.pow(l, 2)
				/ (Math.pow(l, 2) + 1));

		var ddy = Math.sqrt(Math.pow(dd, 2) / (Math.pow(l, 2) + 1));

		var tx1 = this.px + dx;
		var ty1 = this.py + dy;
		var tx2 = this.px - dx;
		var ty2 = this.py - dy;

		var tx3 = this.pw - dx;
		var ty3 = this.ph - dy;
		var tx4 = this.pw + dx;
		var ty4 = this.ph + dy;

		var x1 = tx1 + ddx;
		var y1 = ty1 - ddy;
		var x2 = tx2 + ddx;
		var y2 = ty2 - ddy;

		var x11 = tx1 - ddx;
		var y11 = ty1 + ddy;
		var x22 = tx2 - ddx;
		var y22 = ty2 + ddy;

		var x3 = tx3 - ddx;
		var y3 = ty3 + ddy;
		var x4 = tx4 - ddx;
		var y4 = ty4 + ddy;

		var x33 = tx3 + ddx;
		var y33 = ty3 - ddy;
		var x44 = tx4 + ddx;
		var y44 = ty4 - ddy;

		if (l < 0) {
			tx1 = this.px - dx;
			ty1 = this.py + dy;
			tx2 = this.px + dx;
			ty2 = this.py - dy;

			tx3 = this.pw + dx;
			ty3 = this.ph - dy;
			tx4 = this.pw - dx;
			ty4 = this.ph + dy;

			x1 = tx1 + ddx;
			y1 = ty1 + ddy;
			x2 = tx2 + ddx;
			y2 = ty2 + ddy;
			x3 = tx3 - ddx;
			y3 = ty3 - ddy;
			x4 = tx4 - ddx;
			y4 = ty4 - ddy;

			x11 = tx1 - ddx;
			y11 = ty1 - ddy;
			x22 = tx2 - ddx;
			y22 = ty2 - ddy;
			x33 = tx3 + ddx;
			y33 = ty3 + ddy;
			x44 = tx4 + ddx;
			y44 = ty4 + ddy;
		}

		context.beginPath();
		context.moveTo(x1, y1);
		context.lineTo(x2, y2);
		context.lineTo(x22, y22);
		context.lineTo(x11, y11);
		context.lineTo(x1, y1);
		context.closePath();
		if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

			if (l < 0)
				context.canvas.style.cursor = 'nw-resize';
			else
				context.canvas.style.cursor = 'ne-resize';
			return "left";
		}

		context.beginPath();
		context.moveTo(x3, y3);
		context.lineTo(x4, y4);
		context.lineTo(x44, y44);
		context.lineTo(x33, y33);
		context.lineTo(x3, y3);
		context.closePath();
		if (context.isPointInPath(mouseloc.x, mouseloc.y)) {

			if (l < 0)
				context.canvas.style.cursor = 'nw-resize';
			else
				context.canvas.style.cursor = 'ne-resize';
			return "right";
		}
	}

	return null;

};

Obstacle.prototype.stroke = function(context, options, selbtn) {

	context.save();
	context.lineWidth = LINEWIDTH_OBSTACLE_STROKE;
	context.strokeStyle = getRectColor(this.obField, 2);
	var locx = undefined, locy = undefined;

	if (selbtn || (this.obId != "" && options.mouseoverId == this.obId)) {

		context.beginPath();
		context.moveTo(this.px, this.py);
		context.lineTo(this.pw, this.ph);
		context.closePath();
		context.stroke();

		context.fillStyle = context.strokeStyle;

		var length = 7;

		if (this.ph == this.py) {

			var left = this.px < this.pw ? this.px : this.pw;
			var right = this.px > this.pw ? this.px : this.pw;
			context.beginPath();
			context.rect(left - length / 2, this.py - length / 2, length,
					length);
			context.rect(right - length / 2, this.ph - length / 2, length,
					length);
			context.closePath();
			context.fill();
			context.stroke();

			if (selbtn) {

				locx = (right * options.canvasScale + options.translateOffX) - 18;
				locy = (this.py * options.canvasScale + options.translateOffY) - 28;

			}

		} else if (this.pw == this.px) {

			var top = this.py < this.ph ? this.py : this.ph;
			var bottom = this.py > this.ph ? this.py : this.ph;

			context.beginPath();
			context
					.rect(this.px - length / 2, top - length / 2, length,
							length);
			context.rect(this.pw - length / 2, bottom - length / 2, length,
					length);
			context.closePath();
			context.fill();
			context.stroke();

			if (selbtn) {

				locx = (this.px * options.canvasScale + options.translateOffX) + 8;
				locy = (top * options.canvasScale + options.translateOffY);

			}

		} else {

			var l = -(this.pw - this.px) / (this.ph - this.py);

			var d = length / 2;
			var dx = Math.sqrt(Math.pow(d, 2) / (Math.pow(l, 2) + 1));
			var dy = Math.sqrt(Math.pow(d, 2) * Math.pow(l, 2)
					/ (Math.pow(l, 2) + 1));

			var dd = length / 2;
			var ddx = Math.sqrt(Math.pow(dd, 2) * Math.pow(l, 2)
					/ (Math.pow(l, 2) + 1));

			var ddy = Math.sqrt(Math.pow(dd, 2) / (Math.pow(l, 2) + 1));

			var tx1 = this.px + dx;
			var ty1 = this.py + dy;
			var tx2 = this.px - dx;
			var ty2 = this.py - dy;

			var tx3 = this.pw - dx;
			var ty3 = this.ph - dy;
			var tx4 = this.pw + dx;
			var ty4 = this.ph + dy;

			var x1 = tx1 + ddx;
			var y1 = ty1 - ddy;
			var x2 = tx2 + ddx;
			var y2 = ty2 - ddy;

			var x11 = tx1 - ddx;
			var y11 = ty1 + ddy;
			var x22 = tx2 - ddx;
			var y22 = ty2 + ddy;

			var x3 = tx3 - ddx;
			var y3 = ty3 + ddy;
			var x4 = tx4 - ddx;
			var y4 = ty4 + ddy;

			var x33 = tx3 + ddx;
			var y33 = ty3 - ddy;
			var x44 = tx4 + ddx;
			var y44 = ty4 - ddy;

			if (l < 0) {
				tx1 = this.px - dx;
				ty1 = this.py + dy;
				tx2 = this.px + dx;
				ty2 = this.py - dy;

				tx3 = this.pw + dx;
				ty3 = this.ph - dy;
				tx4 = this.pw - dx;
				ty4 = this.ph + dy;

				x1 = tx1 + ddx;
				y1 = ty1 + ddy;
				x2 = tx2 + ddx;
				y2 = ty2 + ddy;
				x3 = tx3 - ddx;
				y3 = ty3 - ddy;
				x4 = tx4 - ddx;
				y4 = ty4 - ddy;

				x11 = tx1 - ddx;
				y11 = ty1 - ddy;
				x22 = tx2 - ddx;
				y22 = ty2 - ddy;
				x33 = tx3 + ddx;
				y33 = ty3 + ddy;
				x44 = tx4 + ddx;
				y44 = ty4 + ddy;
			}

			context.beginPath();
			context.moveTo(x1, y1);
			context.lineTo(x2, y2);
			context.lineTo(x22, y22);
			context.lineTo(x11, y11);
			context.lineTo(x1, y1);
			context.closePath();
			context.fill();
			context.stroke();

			context.beginPath();
			context.moveTo(x3, y3);
			context.lineTo(x4, y4);
			context.lineTo(x44, y44);
			context.lineTo(x33, y33);
			context.lineTo(x3, y3);
			context.closePath();
			context.fill();
			context.stroke();

			if (l < 0) {
				if (x2 < x4) {
					locx = (x2 * options.canvasScale + options.translateOffX) + 8;
					locy = (y2 - 14) * options.canvasScale + options.translateOffY;
				}

				else {
					locx = (x33 * options.canvasScale + options.translateOffX) + 8;
					locy = (y33 - 14) * options.canvasScale + options.translateOffY;
				}

			} else {
				if (x2 < x4) {
					locx = (x4 * options.canvasScale + options.translateOffX) + 8;
					locy = (y4 * options.canvasScale + options.translateOffY);
				}

				else {
					locx = (x11 * options.canvasScale + options.translateOffX) + 8;
					locy = (y11 * options.canvasScale + options.translateOffY);
				}

			}

		}

		if (selbtn && locx != undefined && locy != undefined) {
			delbtn.style.left = locx + "px";
			delbtn.style.top = locy + "px";
			delbtn.style.color = "#ced7db";
			delbtn.style.display = "inline";
		}

	} else {

		context.beginPath();
		context.moveTo(this.px, this.py);
		context.lineTo(this.pw, this.ph);
		context.stroke();

	}

	context.restore();

};

Obstacle.prototype.fill = function() {
};