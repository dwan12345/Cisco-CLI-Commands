var selectMeshGroup = '';
var currentMeshRadio = "";
var currentMeshChannel = "";
function runMesh(sender) {
	if ($(sender).hasClass('disabled'))
		return;
	$("#menuDiv").css("display", "none");
	$("#meshGroupBox").show();
	$(".floor_topmenu .env-item").addClass("disabled");
	$(".floor_topmenu .dev-item").addClass("disabled");
	$(".floor_topmenu .dropdown-button").removeAttr('data-activates');
	resetDropdown();
	$("#meshMenu").addClass("active");
	global.showMesh = true;
	loadMeshGroupBox();
	if (global.currentFloor.floorType == 1) {
		refreshDataDraw();
	} else {
		resetHeatcontext();
		resetMaincontext();
	}
}
function hideMeshPane() {
	$("#menuDiv").css("display", "block");
	$("#meshGroupBox").hide();
	undoMeshSel();
	hideEditToolbar();
}
function closeMesh() {

	$(".floor_topmenu .env-item").removeClass("disabled");
	$(".floor_topmenu .dev-item").removeClass("disabled");
	$('#dropdown_zonebtn').attr('data-activates', 'dropdown_zone');
	$('#dropdown_obsbtn').attr('data-activates', 'dropdown_obs');
	$('#dropdown_areabtn').attr('data-activates', 'dropdown_area');
	$("#meshMenu").removeClass("active");
	hideMeshPane();

	global.currentMeshGroup = null;
	global.meshManage = false;
	refreshDataDraw();
	global.showMesh = false;
	refreshMeshLines();
	if (global.currentFloor.floorType == 1) {
		refreshDataDraw();
	} else {
		resetHeatcontext();
		resetMaincontext();
	}
	resetDropdown();
}
function hideCreateMeshMode() {
	$("#mesh_create").hide();
	$("#mesh_view").show();
	$("#meshMenu .meshMenu span").removeClass('active');
}
function loadMeshGroupBox(obj) {
	var currentId;
	if (obj && !obj.meshSSID)
		currentId = obj;
	var param = {
		"floorId" : global.currentFloor.floorId
	};
	doActionParam(
			loader.Request.FloorGetMeshGroups,
			param,
			function(result) {

				var html = '';
				if (result.data && result.data.length > 0) {
					global.meshGroups = result.data;
					for (var i = 0; i < result.data.length; i++) {
						var item = result.data[i];
						if (!currentId && obj && obj.meshSSID) {
							if (item.meshSSID == obj.meshSSID) {
								currentId = item.id;
							}
						}
						html += '<li><a id="'
								+ item.id
								+ '" class="cc" href="javascript:void(0);" onclick="changeCurrentGroup(this,'
								+ item.id + ')"><div>';
						if (item.apType == 1) {
							html += '<span class="aa" style="margin-right:8px;" id="'
									+ item.id
									+ '">'
									+ item.meshSSID
									+ "(Outdoor)" + '</span>';
						} else {
							html += '<span class="aa" style="margin-right:8px;" id="'
									+ item.id
									+ '">'
									+ item.meshSSID
									+ "(Indoor)" + '</span>';
						}

						if (item.bandName == '2.4') {
							html += '<span class="sw-tag tag24G">'
									+ item.bandName + 'GHz</span>';
						} else {
							html += '<span class="sw-tag tag5G">' + 5
									+ 'GHz</span>';
						}

						html += '</div></a></li>';
					}

					html += '<li style="background:#dfe7ea"><a href="javascript:void(0)" onclick="showCreateMesh();"><i class="fa fa-plus" style="margin-right:8px"></i>Create Mesh Group</a></li>';

					$("#dropdown_meshList").html(html);
					$("#mesh_view").show();
					$("#mesh_create").hide();
					if (currentId) {
						$('#dropdown_meshList li>a[id="' + currentId + '"]')
								.click();
					} else {
						$('#dropdown_meshList li:first>a').click();
					}
				} else {
					global.meshGroups = [];
					global.currentMeshGroup = null;
					refreshMeshLines();
					$("#meshSsid").val('');
					// $("#meshPsk").val('');
					$(".help-inline.meshSSID").remove();
					$('#dropdown_meshBand li:first>a').click();
					$("#mesh_create").show();
					$("#mesh_view").hide();
					$("#mesh_create_btn").unbind('click');
					$("#mesh_close_btn").unbind('click');
					$("#mesh_create_btn").on('click', createMeshMode).html(
							"CREATE");
					$("#mesh_close_btn").on('click', closeMesh).html("EXIT");
				}

			});

}
function showCreateMesh() {
	if (global.meshManage) {
		undoMeshSel();
	}
	$("#mesh_view").hide();
	$("#mesh_create").show();
	$("#meshSsid").val('');
	// $("#meshPsk").val('');
	$(".help-inline.meshSSID").remove();
	$('#meshSsid').unbind('input');
	$("#meshSsid").on("input", function() {
		var pname = $(this).val();
		if (pname && $.trim(pname).length > 0) {
			$(".help-inline.meshSSID").remove();
			$("#mesh_create_btn").removeClass("disabled");
		}
	});
	$("#mesh_create_btn").unbind('click');
	$("#mesh_close_btn").unbind('click');
	$("#mesh_create_btn").on('click', createMeshMode).html("CREATE");
	$("#mesh_close_btn").on('click', hideCreateMeshMode).html("CANCEL");
}

function editMeshGroup(sender, meshId) {
	if ($(sender).hasClass('active')) {

	} else {
		if (global.meshManage) {
			undoMeshSel();
		}
		$("#meshMenu .meshMenu span").removeClass('active');
		$(sender).addClass('active');
		$("#mesh_view").hide();
		$("#mesh_create").show();
		if (global.currentMeshGroup) {
			$("#meshSsid").val(global.currentMeshGroup.meshSSID);
			// $("#meshPsk").val(global.currentMeshGroup.meshPSK);
			if (global.currentMeshGroup.bandName == "2.4") {
				$("#meshradio_24").click();
			} else {
				$(
						"#meshradio_" + global.currentMeshGroup.apType
								+ global.currentMeshGroup.channelSize).click();
			}
			$("#channel_" + global.currentMeshGroup.channel).click();
		}
		$(".help-inline.meshSSID").remove();
		$("#mesh_create_btn").unbind('click');
		$("#mesh_create_btn").on('click', saveEditMeshGroup).html("SAVE");
		$("#mesh_close_btn").unbind('click');
		$("#mesh_close_btn").on('click', hideCreateMeshMode).html("CANCEL");

	}

}

function manageMeshGroup(sender) {
	if ($(sender).hasClass('active')) {

	} else {
		$("#manage-img").attr("src", "resource/image/mesh-manage-active.svg");
		global.meshManage = true;
		$("#meshMenu .meshMenu span").removeClass('active');
		$(sender).addClass('active');
		$("#meshGroup").html(global.currentMeshGroup.meshSSID);

		$("#meshTool").css("top", "123px");

		var ww = $("#canvasdiv").outerWidth();
		var w = $("#meshTool").outerWidth();
		ww = (ww - w) / 2;
		$("#meshTool").css("left", ww + "px");

		$("#meshTool").show();
		refreshDataDraw();
	}
}
function cancelDeleteMesh() {
	closeDialog("deleteModal");
	$("#meshMenu .meshMenu span").removeClass('active');
}
function showDeleteMeshGroup(sender) {
	$("#meshMenu .meshMenu span").removeClass('active');
	$(sender).addClass('active');
	var height = document.body.offsetHeight;
	var top = (height - 224) / 2;
	$(".msgCon").html(global.currentMeshGroup.meshSSID);
	$('.modal').modal({
		dismissible : false, // Modal can be dismissed by clicking
		// outside of the modal
		opacity : 0.5, // Opacity of modal background
		inDuration : 300, // Transition in duration
		outDuration : 200, // Transition out duration
		starting_top : '20%', // Starting top style attribute
		ending_top : top + "px"
	});
	$('#deleteModal').modal('open');
}
function deleteMeshGroup() {
	if (global.meshManage) {
		undoMeshSel();
	}
	doAction(loader.Request.FloorDeleteMeshGroup, global.currentMeshGroup,
			function(data) {
				console.log(data);
				loadMeshGroupBox();
				refreshFloorDetail();
			});
	closeDialog("deleteModal");
	$("#meshMenu .meshMenu span").removeClass('active');
}
/*
 * function activeMeshGroup(sender, id) { $(".ssidMenu").hide();
 * $("#meshGroupBoxTbody tr").removeClass('active');
 * $(sender).addClass('active'); $(sender).find(".ssidMenu").show(); if
 * (global.meshGroups) { for (var i = 0; i < global.meshGroups.length; i++) { if
 * (id == global.meshGroups[i].id) { global.currentMeshGroup =
 * global.meshGroups[i]; } } } refreshDataDraw(); }
 */
function undoMeshSel() {
	global.meshManage = false;
	$("#meshTool").hide();
	$("#meshMenu .meshMenu span").removeClass('active');
	$("#manage-img").attr("src", "resource/image/mesh-manage.svg");
	refreshFloorDetail();

}

function doneMeshSel() {
	global.meshManage = false;
	$("#meshTool").hide();
	$("#meshMenu .meshMenu span").removeClass('active');
	$("#manage-img").attr("src", "resource/image/mesh-manage.svg");
	var arr = [];
	if (global.currentFloor.floorType == 1 && googleMap.bind.apList) {
		for (var i = 0; i < googleMap.bind.apList.length; i++) {
			var ap = googleMap.bind.apList[i];

			if (ap.bandList !== undefined) {
				for (var j = 0; j < ap.bandList.length; j++) {

					if (ap.bandList[j].bandName == global.currentMeshGroup.bandName) {
						arr.push({
							apId : ap.apId,
							bandName : ap.bandList[j].bandName,
							meshSSID : ap.bandList[j].meshSSID,
							// meshPSK : ap.bandList[j].meshPSK,
							channelSize : ap.bandList[j].channelSize,
							channel : ap.bandList[j].channel
						});

					}
				}
			}
		}
	} else {
		$
				.each(
						obstructions.options,
						function(index, ap) {
							if (ap && ap.apId && !ap.atId) {
								if (ap.bandList !== undefined) {
									for (var j = 0; j < ap.bandList.length; j++) {

										if (ap.bandList[j].bandName == global.currentMeshGroup.bandName) {
											arr
													.push({
														apId : ap.apId,
														bandName : ap.bandList[j].bandName,
														meshSSID : ap.bandList[j].meshSSID,
														// meshPSK :
														// ap.bandList[j].meshPSK,
														channelSize : ap.bandList[j].channelSize,
														channel : ap.bandList[j].channel
													});

										}
									}
								}
							}

						});
	}

	doAction(loader.Request.FloorUpdateAPMeshs, arr, function(result) {

		refreshFloorDetail();
		refreshMeshLines();
	});

}
function changeCurrentGroup(sender, meshId) {
	$("#CurrentMesh").html($(sender).find('span').first().html());
	var radio = $(sender).find('span').last().html();
	if ($(sender).find('span').last().hasClass('tag24G')) {
		$("#CurrentMesh_radio").html(radio).attr("class", "sw-tag tag24G");
	} else {
		$("#CurrentMesh_radio").html(radio).attr("class", "sw-tag tag5G");
	}
	if (global.meshGroups) {
		for (var i = 0; i < global.meshGroups.length; i++) {
			if (meshId == global.meshGroups[i].id) {
				global.currentMeshGroup = global.meshGroups[i];
				refreshMeshLines();
			} else {

			}
		}
	}
	if (global.currentFloor.floorType == 0) {
		resetHeatcontext();
		resetMaincontext();
	} else {
		refreshDataDraw();
	}
	/*
	 * if(global.meshManage){ manageMeshGroup(sender,meshId); }
	 */
}
function updateMeshChannelList(sender, radioStr) {
	var html = "";
	var chs = getMeshChannelList(radioStr);
	for (var t = 0; t < chs.length; t++) {
		html += "<li><a id='channel_" + chs[t]
				+ "' href='javascript:void(0);' onclick='changeChannel(this,"
				+ chs[t] + ")'>";
		html += "<span >" + chs[t] + "</span></a></li>";
	}
	$("#dropdown_meshChannel").html(html);
	currentMeshRadio = radioStr;
	$("#CurrentMeshband").html($(sender).children('span:first').html());
	$('#dropdown_meshChannel li:first>a').click();
}
function changeChannel(sender, channel) {
	currentMeshChannel = channel;
	$("#CurrentMeshchannel").html($(sender).find('span').first().html());
}
function getMeshChannelList(value) {
	var data = value.split('_');
	var chs;
	if (data.length == 1) {
		chs = global.channel['ch24str'].split(",");
	} else if (data.length == 3) {
		if (data[1] == '0') {
			chs = global.channel['ch5str' + data[2]].split(",");
		} else {
			chs = global.channel['ch5Outstr' + data[2]].split(",");
		}
	}
	return chs;
}
function createMeshMode() {
	var name = $("#meshSsid").val();
	// var psk = $("#meshPsk").val();
	$(".help-inline.meshSSID").remove();
	if (!name || $.trim(name).length == 0) {
		var error = "<span class='help-inline meshSSID'>The Mesh Group can't be empty.</span>";
		$("#meshNameError").append(error);
		return;
	}
	if (global.meshGroups) {
		for (var i = 0; i < global.meshGroups.length; i++) {
			if (name == global.meshGroups[i].meshSSID) {
				var error = "<span class='help-inline meshSSID'>"
						+ message.project.ssidIsExist + "</span>";
				$("#meshNameError").append(error);
				return;
			}
		}
	}
	var meshGroup = {
		meshSSID : $("#meshSsid").val(),
		// meshPSK : $("#meshPsk").val(),
		channel : currentMeshChannel,
		floorId : global.currentFloor.floorId
	};
	var data = currentMeshRadio.split('_');
	if (data.length == 1) {
		meshGroup.bandName = "2.4";
		meshGroup.apType = 0;
		meshGroup.channelSize = "20";
	} else {
		meshGroup.bandName = "5.0";
		if (data[1] == '0') {
			meshGroup.apType = 0;

		} else {
			meshGroup.apType = 1;
		}
		meshGroup.channelSize = data[2];
	}
	doAction(loader.Request.FloorInsertMeshGroup, meshGroup, function(result) {
		loadMeshGroupBox(meshGroup);
	});
}
function saveEditMeshGroup(sender) {
	var name = $("#meshSsid").val();
	// var psk = $("#meshPsk").val();
	$(".help-inline.meshSSID").remove();
	if (!name || $.trim(name).length == 0) {
		var error = "<span class='help-inline meshSSID'>The Mesh Group can't be empty.</span>";
		$("#meshNameError").append(error);
		return;
	}
	if (global.meshGroups) {
		for (var i = 0; i < global.meshGroups.length; i++) {
			if (name == global.meshGroups[i].meshSSID
					&& global.currentMeshGroup.id != global.meshGroups[i].id) {
				var error = "<span class='help-inline meshSSID'>"
						+ message.project.ssidIsExist + "</span>";
				$("#meshNameError").append(error);
				return;
			}
		}
	}
	var meshGroup = {
		id : global.currentMeshGroup.id,
		floorId : global.currentFloor.floorId,
		meshSSID : $("#meshSsid").val(),
		// meshPSK : $("#meshPsk").val(),
		channel : currentMeshChannel,
	};
	var data = currentMeshRadio.split('_');
	if (data.length == 1) {
		meshGroup.bandName = "2.4";
		meshGroup.apType = 0;
		meshGroup.channelSize = "20";
	} else {
		meshGroup.bandName = "5.0";
		if (data[1] == '0') {
			meshGroup.apType = 0;

		} else {
			meshGroup.apType = 1;
		}
		meshGroup.channelSize = data[2];
	}
	doAction(loader.Request.FloorUpdateMeshGroup, meshGroup, function(data) {
		$("#meshMenu .meshMenu span").removeClass('active');
		refreshFloorDetail(function() {
			loadMeshGroupBox(global.currentMeshGroup.id);
		});
	});
	closeDialog('createMeshModal');
}

var meshLineHash = [];

function refreshMeshLines() {
	if (global.currentFloor.floorType != 0)
		return;
	if (global.currentMeshGroup == null) {
		meshLineHash = [];
	} else if (global.currentMeshGroup.meshSSID) {
		meshLineHash = [];
		$.each(obstructions.options, function(index, value) {
			if (value == null || !value.apId || value.atId)
				return;
			if (!isInCurrentMesh(global, value))
				return;

			$.each(obstructions.options, function(index, value2) {
				if (value2 == null || value2.apId == value.apId || !value2.apId
						|| value2.atId)
					return;
				if (!isInCurrentMesh(global, value2))
					return;

				var newMeshLine = new MeshLine({
					apId1 : value.apId,
					apId2 : value2.apId,
					band : global.currentBand,
					x1 : value.px,
					y1 : value.py,
					x2 : value2.px,
					y2 : value2.py

				});

				var jsondata = {
					floorId : global.currentFloor.floorId,
					apId1 : newMeshLine.apId1,
					apId2 : newMeshLine.apId2,
					band : newMeshLine.band
				};
				newMeshLine.performance = "?";
				doActionParam(loader.Request.getWDSWeight, jsondata, function(
						data) {
					if (!data)
						return;
					newMeshLine.performance = Math.round(data.data);
					resetHeatcontext();
					resetMaincontext();
				});

				var distance = Math.sqrt(Math.pow(newMeshLine.x2
						- newMeshLine.x1, 2)
						+ Math.pow(newMeshLine.y2 - newMeshLine.y1, 2));
				newMeshLine.distance = Math.round(distance * global.rulescale);

				meshLineHash.push(newMeshLine);

			});

		});
	}
}