/**
 * 
 */
(function($) {
   
	$.fn.editTable =function(options) {
		var defaults = {
			isPage : false
		};
		var opts = $.extend(defaults, options);

		$(this).each(function() {

			// 获取当前table
			var newTable = $(this);
			var tdcount = $("#inventoryTable").find('thead th').length;
			// 获取当前table中tbody中的td
			var newtr = newTable.find('tbody tr');
			/*newtr.mouseover(function() {
				var pre = $(this).prev();
				var next = $(this).next();
				var len = $(this).children('td').length;
				if (len != tdcount) {
					showEditStyle(pre);
				} else {
					len = next.children('td').length;
					if (len != 0 && len != tdcount) {
						showEditStyle(next);
					}
				}
				showEditStyle($(this));

			});*/
			/*newtr.mouseout(function() {
				var pre = $(this).prev();
				var next = $(this).next();
				var len = $(this).children('td').length;
				if (len != tdcount) {
					hideEditStyle(pre);
				} else {
					len = next.children('td').length;
					if (len != 0 && len != tdcount) {
						hideEditStyle(next);
					}
				}
				hideEditStyle($(this));
			});*/
			/*newtr.click(function() {
				var pre = $(this).prev();
				var next = $(this).next();
				var len = $(this).children('td').length;
				if (len != tdcount) {
					addHighLight(pre);
				} else {
					addHighLight($(this));
				}
			});*/

			var newtd = newTable.find('tbody td');

			newtd.click(function(object,evt) {
				var editType = this.getAttribute("EditType");
				if (!editType) {
					return;
				} else {
					EditCell($(this), "focus");
				}
				//var evt = arguments.callee.caller.arguments[0] || window.event;
				
				 var e=(evt)?evt:window.event;  
				 if (window.event) {  
				 e.cancelBubble=true;  
				 } else {  
				 e.stopPropagation();  
				 }  
			});
			newtd.mouseover(function() {
				var editType = this.getAttribute("EditType");
				if (!editType) {
					return;
				} else {
					EditCell($(this));
				}
			});
			
			 newtd.mouseleave(function(evt){ 
				  var e=window.event || evt;
				    if(document.all){if(!e.toElement) return;}
				    else if(!e.relatedTarget) return;
				 exitEdit(this,true); 			
				 });
			 
		});
	};
/*	$(document).unbind('click',clickMethod);
	$(document).bind('click',clickMethod);
		 function clickMethod(e){
			if($(e.target).parents("#inventoryModal").length==0) return;
			var newtd = $('table#inventoryTable').find('tbody td');
			
			newtd.each(function( ){
				if(this.cellInex==0) return;
				var sender=this;
				var editType = sender.getAttribute("EditType");
				if (!editType) {
					return;
				} else {
					if (editType == "TextBox") {
						CancelEditCell(false,$(sender), $(sender).children("input").val());
					} else {
						if($(e.target).attr("id")=="inventoryclose") return;
						CancelEditCell(false,$(sender), $(sender).children("select")
								.val(), $(sender).children("select").find(
								"option:selected").text());
					}
				}
			});
			if($(e.target).attr("id")=="Tablesearch"){
				document.getElementById('Tablesearch').focus();
			}
		};*/
		function exitEdit(sender,isout) {
			var editType = sender.getAttribute("EditType");
			if (!editType) {
				return;
			} else {
				if (editType == "TextBox") {
					CancelEditCell(isout,$(sender), $(sender).children("input").val());
				} else {
					CancelEditCell(isout,$(sender), $(sender).children("select")
							.val(), $(sender).children("select").find(
							"option:selected").text());
				}
			}
		}
		// 编辑表格
		function EditCell(sender, action) {

			var editType = sender.attr("EditType");
			switch (editType) {
			case "TextBox":
				CreateTextBox(sender, sender.html(), action);
				break;
			case "DropDownList":
				CreateDropDownList(sender, sender.html(), action);
				break;
			default:
				break;
			}
		}
		// 为单元格创建可编辑输入框
		function CreateTextBox(sender, value, action) {
			// 检查编辑状态，如果已经是编辑状态，跳过
			var editState = sender.attr("EditState");
			if (editState != "true") {
				// 创建文本框
				var width = sender.width();
				var max = 36;
				if (sender.get(0).cellIndex == 1) {
					width = width - 25;
					max = 36;
				}// 名称单元格宽度
				if (sender.get(0).cellIndex == 8) {
					width = width - 30;
					max = 20;
				}// 地址单元格宽度
				var textBox = $("<input type='text' class='form-control EditCell_TextBox' maxlength="
						+ max + " style='width:" + width + "px;'/>");
				if (!value) {
					value = sender.attr("Value");
				}
				
				textBox.val(HtmlDiscode(value));
				textBox.attr("title", HtmlDiscode(value));
				// 设置文本框的失去焦点事件
				textBox.blur(function() {
					CancelEditCell(false,sender, $(this).val());

				});
				textBox.focus(function() {
					sender.attr("SaveSate", true);
				});
				textBox.keydown(function(event) {
					var keyCode = event.which;
					switch (keyCode) {
					case 13:
						CancelEditCell(false,sender, $(this).val());
						break;
					case 27:
						
						CancelEditCell(false,sender, $(this).val());		
						//$("#myInventory").focus();
					
						break;
				
					}
				});
				// 向当前单元格添加文本框
				sender.html(textBox);

				// 改变状态变量
				sender.attr("SaveSate", false);
				sender.attr("EditState", true);
				sender.parent().parent().attr("CurrentRow",
						sender.parent().index());
			}

		}
		// 为单元格创建选择框
		function CreateDropDownList(sender, value, action) {
			var tr = sender.parent().get(0);
			var tdcount = $("#inventoryTable").find('thead th').length;
			var index = sender.index();
			var height="32px;";
			if (tr.cells.length < tdcount) {
				height="24px;";
			} else {
				
				var next=sender.parent().next().get(0);
				if(next){
					if(next.cells.length<tdcount){
						height="24px;";
					}
				}
				
			}
			// 检查编辑状态，如果已经是编辑状态，跳过
			var editState = sender.attr("EditState");
			var iscontrol = sender.attr("isControl");
			if (editState != "true") {
				// 创建下接框
				var width = sender.width() - 25;
				var downList = $("<select  class='form-control EditCell_DropDownList' style='width:"
						+ width + "px;height:"+height+"'/>");

				// 加一个控制事件
				// 添加列表项
				var items = sender.attr("DataItems");
				if (items) {
					// items = eval("[" + items + "]");
					items = eval(items);
					var oOption = "";
					for (var i = 0; i < items.length; i++) {
						oOption += "<option value=" + items[i].value + ">"
								+ items[i].text + "</option>";
					}
					downList.html(oOption);
				}
				// 设置列表当前值
				// if (!value)
				{
					value = sender.attr("Value");
				}
				downList.val(value);
				if (iscontrol == "true") {
					downList.change(function() {
						var radioState = $(this).val();
						if (radioState == "0") {
							sender.css("opacity", "1");
							sender.next().css("opacity", "1").attr("EditState",false).attr("EditType",
							"DropDownList");
							sender.next().next().css("opacity", "1").attr("EditState",false).attr("EditType",
									"DropDownList");
							 sender.next().next().next().css("opacity", "1").attr("EditState",false).attr("EditType",
									"DropDownList");
							 sender.next().next().next().next().css("opacity", "1").attr("EditState",false).attr("EditType",
									"DropDownList");
						} else {
							sender.css("opacity", "0.5");
							sender.next().css("opacity", "0.5")
							.removeAttr("EditType");
							sender.next().next().css("opacity", "0.5")
									.removeAttr("EditType");
							sender.next().next().next().css("opacity", "0.5")
									.removeAttr("EditType");
							sender.next().next().next().next().css("opacity", "0.5")
							.removeAttr("EditType");
						}
					});
				}
				// 设置创建下接框的失去焦点事件

			/*	downList.blur(function() {

					//$(this).parent().mouseleave(function() {
					//	exitEdit(this);
					//});
					CancelEditCell(false,sender, $(this).val(), $(this).find(
							"option:selected").text());
				});

				downList.focus(function() {
					//$(this).parent().unbind("mouseleave");
					sender.attr("SaveSate", true);
				});*/
				downList.change(function(){
					sender.attr("SaveSate", true);				
					CancelEditCell(false,sender, $(this).val(), $(this).find(
					"option:selected").text());
					
				});
				// 向当前单元格添加创建下接框
				sender.html(downList);
				// 记录状态的改变
				sender.attr("SaveSate", false);
				sender.attr("EditState", true);
				sender.parent().parent().attr("LastEditRow",
						sender.parent().index());
			}

		}

		function showEditStyle(sender) {

			if (sender.hasClass("HighLightRow")) {
				sender.attr("class", "specialRow highLight");

			} else {
				sender.attr("class", "specialRow");

			}
		}
		function hideEditStyle(sender) {

			if (!sender.hasClass("highLight")) {
				sender.attr("class", "normalRow");

			} else {
				sender.attr("class", "HighLightRow hightLight");

			}
		}
		function addHighLight(sender) {

			var evt = arguments.callee.caller.arguments[0] || window.event;
			var t = evt.srcElement ? evt.srcElement : evt.target;

			// 由于checkbox触发click事件后不能阻止冒泡，会继续执行addHighLight函数，因此当checkbox执行一次click后，再次进来需要阻止该函数继续运行。
			if ($(t).attr("type") === "checkbox") {
				return false;
			}
			if ($(t).attr("EditType")) {
				return false;
			}
			var ck = sender.find("input[type=checkbox]").eq(0);
			if (ck.length > 0) {
				ck.trigger("click");
				// 利用checkbox的click事件给行添加颜色，不必执行后面的代码，因此返回
				return;
			}

		}

		// 清空指定对象的所有字节点
		function ClearChild(sender) {
			sender.html("");
		}
		// 取消单元格编辑状态
		function CancelEditCell(isout,sender, value, text) {
			var prevalue = sender.attr("Value");
			var needsave = sender.attr("SaveSate");
			if(needsave=="true"&&isout) return;
			sender.attr("Value", value);
			if (text) {
				sender.html(text);
			} else {
				sender.html(value);
			}
			sender.attr("EditState", false);
			if (prevalue == value || prevalue == text) {
				document.getElementById('inventoryModal').focus();
				return;
			}
			var needsave = sender.attr("SaveSate");
			if (needsave != "true")
			{		
				document.getElementById('inventoryModal').focus();
				return;			
			}
			// if(text=="") return;
			var tr = sender.parent().get(0);
			var tdcount = $("#inventoryTable").find('thead th').length;
			var index = sender.index();
			if (tr.cells.length < tdcount) {
				var pre = sender.parent().prev().get(0);
				if (pre.cells.length < tdcount)  {
					pre = sender.parent().prev().prev().get(0);
				}
				saveInventory(index, tr, false, pre);
			} else {
				saveInventory(index, tr, true);
			}
			sender.attr("SaveSate", false);
			document.getElementById('inventoryModal').focus();
		}


})(jQuery);